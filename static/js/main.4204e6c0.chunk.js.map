{"version":3,"sources":["components/todo/tabs.js","constants.js","components/todo/todo.js","components/todo/list.js","components/extends/input.js","components/todo/create.js","components/todo/header.js","components/todo/index.js","App.js","reportWebVitals.js","index.js"],"names":["Tabs","props","className","id","role","map","tab","index","href","tabSelected","onClick","changeTab","toString","TABS","Todo","item","type","removeItem","toggleTodoCompleted","status","name","List","todos","todo","removeTodo","Input","placeholder","value","text","onChange","handleChangeText","onKeyDown","addTodo","Create","event","htmlFor","Header","useState","setTabSelected","setTodo","setText","target","key","Math","max","trim","push","filter","getToDos","newTodos","findIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4204e6c0.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nfunction Tabs(props) {\r\n  const tabNames = [\"ALL\", \"COMPLETED\", \"ACTIVE\"];\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n        {tabNames.map((tab, index) => (\r\n          <a\r\n            href=\"#!\"\r\n            key={index.toString()}\r\n            className={\r\n              \"nav-link text-white \" +\r\n              (props.tabSelected === index ? \"text-dark active\" : \"\")\r\n            }\r\n            onClick={() => props.changeTab(index)}\r\n          >\r\n            {tab}\r\n          </a>\r\n        ))}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nTabs.propTypes = {\r\n  tabSelected: PropTypes.number.isRequired,\r\n  changeTab: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Tabs;\r\n","export const TABS = {\r\n    ALL: 0,\r\n    COMPLETED: 1,\r\n    ACTIVE: 2 \r\n};","import { TABS } from \"../../constants\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Todo(props) {\r\n    const item = props.item;\r\n\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <button\r\n            id=\"delete\"\r\n            type=\"button\"\r\n            className=\"btn btn-link float-right\"\r\n            onClick={props.removeItem}\r\n          >\r\n            ❌\r\n          </button>\r\n          <button\r\n            id=\"done\"\r\n            type=\"button\"\r\n            className=\"btn btn-link float-right mr-3\"\r\n            onClick={props.toggleTodoCompleted}\r\n          >\r\n            ✔️\r\n          </button>\r\n          {item.status === TABS.COMPLETED ? (\r\n            <del>\r\n              <p className=\"card-title lead\">{item.name}</p>\r\n            </del>\r\n          ) : (\r\n            <p className=\"card-title lead\">{item.name}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nTodo.propTypes = {\r\n  removeItem: PropTypes.func.isRequired,\r\n  toggleTodoCompleted: PropTypes.func.isRequired,\r\n  item: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    status: PropTypes.number.isRequired,\r\n  }),\r\n};\r\n\r\nexport default Todo;\r\n","import Todo from \"./todo\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction List(props) {\r\n  const todos = props.todos;\r\n\r\n  return (\r\n    <div className=\"cards\">\r\n      {todos.map((todo) => (\r\n        <Todo\r\n          key={todo.id}\r\n          item={todo}\r\n          removeItem={() => props.removeTodo(todo.id)}\r\n          toggleTodoCompleted={() => props.toggleTodoCompleted(todo.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nList.propTypes = {\r\n  removeTodo: PropTypes.func.isRequired,\r\n  toggleTodoCompleted: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Input(props) {\r\n  return (\r\n    <input\r\n      type={props.type}\r\n      className={props.className}\r\n      placeholder={props.placeholder}\r\n      name={props.name}\r\n      value={props.text}\r\n      onChange={props.handleChangeText}\r\n      onKeyDown={props.addTodo}\r\n    />\r\n  );\r\n}\r\n\r\nInput.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  className: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  handleChangeText: PropTypes.func.isRequired,\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Input;\r\n","import PropTypes from \"prop-types\";\r\nimport Input from \"../extends/input\";\r\n\r\nfunction Create(props) {\r\n\r\n    return (\r\n        <div className=\"form-group mb-5\">\r\n        <Input\r\n          type=\"text\"\r\n          className=\"form-control mb-2\"\r\n          placeholder=\"What do you want to do?\"\r\n          name=\"input\"\r\n          handleChangeText={(event) =>props.handleChangeText(event)}\r\n          addTodo={(event) => props.addTodo(event)}\r\n          text={props.text}\r\n        />\r\n        <label htmlFor=\"#input\">\r\n          <em>\r\n            Press <code>Enter</code> to save\r\n          </em>\r\n        </label>\r\n      </div>\r\n    );\r\n}\r\n\r\nCreate.propTypes = {\r\n  handleChangeText: PropTypes.func.isRequired,\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Create;\r\n","function Header() {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <span className=\"navbar-brand text-white\">Todo List App</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import Tabs from \"./tabs\";\r\nimport List from \"./list\";\r\nimport Create from \"./create\";\r\nimport { TABS } from \"../../constants\";\r\nimport Header from \"./header\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Todo() {\r\n  const [tabSelected, setTabSelected] = useState(TABS.ALL);\r\n  const [todos, setTodo] = useState(\r\n    [\r\n      { id: 1, name: \"Todo1\", status: TABS.ACTIVE },\r\n      { id: 2, name: \"Todo2\", status: TABS.COMPLETED },\r\n      { id: 3, name: \"Todo3\", status: TABS.ACTIVE },\r\n      { id: 4, name: \"Todo4\", status: TABS.COMPLETED },\r\n    ],\r\n  );\r\n  const [text, setText] = useState(\"\");\r\n  \r\n  function changeTab(tab) {\r\n    setTabSelected(tab)\r\n  }\r\n\r\n  function handleChangeText(event) {\r\n    setText(event.target.value)\r\n  }\r\n\r\n  function addTodo(event) {\r\n    let text = event.target.value;\r\n    if (event.key === \"Enter\" && text) {\r\n      let id = Math.max(...todos.map((todo) => todo.id)) + 1;\r\n      let todo = {\r\n        id: id,\r\n        name: text.trim(),\r\n        status: TABS.ACTIVE,\r\n      };\r\n      todos.push(todo);\r\n      setText('');\r\n      setTodo(todos);\r\n    }\r\n  }\r\n\r\n  function getToDos() {\r\n    switch (tabSelected) {\r\n      case TABS.ACTIVE:\r\n        return todos.filter((todo) => todo.status === TABS.ACTIVE);\r\n      case TABS.COMPLETED:\r\n        return todos.filter(\r\n          (todo) => todo.status === TABS.COMPLETED\r\n        );\r\n      default:\r\n        return todos;\r\n    }\r\n  }\r\n\r\n  function removeTodo(id) {\r\n    let newTodos = todos.filter((item) => item.id !== id);\r\n    setTodo(newTodos);\r\n  }\r\n\r\n  function toggleTodoCompleted(id) {\r\n    let index = todos.findIndex((todo) => todo.id === id);\r\n    todos[index].status = todos[index].status === TABS.ACTIVE ? TABS.COMPLETED : TABS.ACTIVE;\r\n    let newTodos = [...todos];\r\n    setTodo(newTodos);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <Tabs tabSelected={tabSelected} changeTab={changeTab} />\r\n      <div className=\"main container rounded p-3\">\r\n        <Create\r\n          handleChangeText={handleChangeText}\r\n          addTodo={addTodo}\r\n          text={text}\r\n        />\r\n        <List\r\n          todos={getToDos()}\r\n          removeTodo={removeTodo}\r\n          toggleTodoCompleted={toggleTodoCompleted}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import \"./App.css\";\r\nimport Todo from \"./components/todo/index\" \r\n\r\nfunction App() {\r\n  return (\r\n      <Todo/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}